// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsServiceClient is the client API for StatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsServiceClient interface {
	GetLatestData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLatestDataResponse, error)
	GetRichListSlice(ctx context.Context, in *GetRichListSliceRequest, opts ...grpc.CallOption) (*GetRichListSliceResponse, error)
	GetAssetOwners(ctx context.Context, in *GetAssetOwnershipRequest, opts ...grpc.CallOption) (*GetAssetOwnershipResponse, error)
}

type statsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {
	return &statsServiceClient{cc}
}

func (c *statsServiceClient) GetLatestData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLatestDataResponse, error) {
	out := new(GetLatestDataResponse)
	err := c.cc.Invoke(ctx, "/qubic.stats.api.pb.StatsService/GetLatestData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetRichListSlice(ctx context.Context, in *GetRichListSliceRequest, opts ...grpc.CallOption) (*GetRichListSliceResponse, error) {
	out := new(GetRichListSliceResponse)
	err := c.cc.Invoke(ctx, "/qubic.stats.api.pb.StatsService/GetRichListSlice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsServiceClient) GetAssetOwners(ctx context.Context, in *GetAssetOwnershipRequest, opts ...grpc.CallOption) (*GetAssetOwnershipResponse, error) {
	out := new(GetAssetOwnershipResponse)
	err := c.cc.Invoke(ctx, "/qubic.stats.api.pb.StatsService/GetAssetOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServiceServer is the server API for StatsService service.
// All implementations must embed UnimplementedStatsServiceServer
// for forward compatibility
type StatsServiceServer interface {
	GetLatestData(context.Context, *emptypb.Empty) (*GetLatestDataResponse, error)
	GetRichListSlice(context.Context, *GetRichListSliceRequest) (*GetRichListSliceResponse, error)
	GetAssetOwners(context.Context, *GetAssetOwnershipRequest) (*GetAssetOwnershipResponse, error)
	mustEmbedUnimplementedStatsServiceServer()
}

// UnimplementedStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServiceServer struct {
}

func (UnimplementedStatsServiceServer) GetLatestData(context.Context, *emptypb.Empty) (*GetLatestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (UnimplementedStatsServiceServer) GetRichListSlice(context.Context, *GetRichListSliceRequest) (*GetRichListSliceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRichListSlice not implemented")
}
func (UnimplementedStatsServiceServer) GetAssetOwners(context.Context, *GetAssetOwnershipRequest) (*GetAssetOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetOwners not implemented")
}
func (UnimplementedStatsServiceServer) mustEmbedUnimplementedStatsServiceServer() {}

// UnsafeStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServiceServer will
// result in compilation errors.
type UnsafeStatsServiceServer interface {
	mustEmbedUnimplementedStatsServiceServer()
}

func RegisterStatsServiceServer(s grpc.ServiceRegistrar, srv StatsServiceServer) {
	s.RegisterService(&StatsService_ServiceDesc, srv)
}

func _StatsService_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.stats.api.pb.StatsService/GetLatestData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetLatestData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetRichListSlice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRichListSliceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetRichListSlice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.stats.api.pb.StatsService/GetRichListSlice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetRichListSlice(ctx, req.(*GetRichListSliceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsService_GetAssetOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServiceServer).GetAssetOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.stats.api.pb.StatsService/GetAssetOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServiceServer).GetAssetOwners(ctx, req.(*GetAssetOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsService_ServiceDesc is the grpc.ServiceDesc for StatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.stats.api.pb.StatsService",
	HandlerType: (*StatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestData",
			Handler:    _StatsService_GetLatestData_Handler,
		},
		{
			MethodName: "GetRichListSlice",
			Handler:    _StatsService_GetRichListSlice_Handler,
		},
		{
			MethodName: "GetAssetOwners",
			Handler:    _StatsService_GetAssetOwners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats-api.proto",
}
